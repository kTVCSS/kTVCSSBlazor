@inject HttpClient http

@if (isApiWorking)
{
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        </Found>
        <NotFound>
            <PageTitle>kTVCSS @@ Страница не найдена</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <RadzenRow>
                    <RadzenColumn Size="12" style="margin-top: 5rem; margin-bottom: 5rem">
                        <RadzenText Text="Страница не найдена" TextStyle="TextStyle.DisplayH1" style="margin: 0; margin-bottom: 2rem" TextAlign="TextAlign.Center" />
                        <RadzenText Text="Извините, но по этому адресу у нас ничего нет!" TextStyle="TextStyle.H6" style="margin: 0" TextAlign="TextAlign.Center" TagName="TagName.P" />
                    </RadzenColumn>
                </RadzenRow>
            </LayoutView>
        </NotFound>
    </Router>
}
else
{
    <PageTitle>kTVCSS @@ backend is dead</PageTitle>
    <LayoutView Layout="@typeof(MainLayout)">
        <RadzenRow>
            <RadzenColumn Size="12" style="margin-top: 5rem; margin-bottom: 5rem">
                <RadzenText Text="Backend не работает" TextStyle="TextStyle.DisplayH1" style="margin: 0; margin-bottom: 2rem" TextAlign="TextAlign.Center" />
                <RadzenText Text="Извините, в данный момент служба ktvcss-backend не доступна, поэтому сайт не может получить какие-либо данные." TextStyle="TextStyle.H6" style="margin: 0" TextAlign="TextAlign.Center" TagName="TagName.P" />
                <RadzenText Text="Администрация уже в курсе этой проблемы и занимается ее решением." TextStyle="TextStyle.H6" style="margin: 0" TextAlign="TextAlign.Center" TagName="TagName.P" />
            </RadzenColumn>
        </RadzenRow>
    </LayoutView>
}


@code {
    private bool isApiWorking = true;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Task.Run(async () =>
            {
                while (true)
                {
                    try
                    {
                        await http.GetAsync("/api/ping");
                        isApiWorking = true;
                        InvokeAsync(StateHasChanged);
                    }
                    catch (Exception)
                    {
                        isApiWorking = false;
                        InvokeAsync(StateHasChanged);
                    }

                    await Task.Delay(TimeSpan.FromMinutes(1));
                }
            });
        }
    }
}