@inject HttpClient http
@inject NavigationManager nm
@inject DialogService DialogService

@if (isApiWorking && !isMaintenance && !locked)
{
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        </Found>
        <NotFound>
            <PageTitle>kTVCSS @@ Страница не найдена</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <RadzenRow>
                    <RadzenColumn Size="12" style="margin-top: 5rem; margin-bottom: 5rem">
                        <RadzenText Text="Страница не найдена" TextStyle="TextStyle.DisplayH1"
                            style="margin: 0; margin-bottom: 2rem" TextAlign="TextAlign.Center" />
                        <RadzenText Text="Извините, но по этому адресу у нас ничего нет!" TextStyle="TextStyle.H6"
                            style="margin: 0" TextAlign="TextAlign.Center" TagName="TagName.P" />
                    </RadzenColumn>
                </RadzenRow>
            </LayoutView>
        </NotFound>
    </Router>
}
else if (!isApiWorking)
{
    <PageTitle>kTVCSS @@ Ошибка</PageTitle>
    <LayoutView Layout="@typeof(MainLayout)">
        <RadzenRow>
            <RadzenColumn Size="12" style="margin-top: 5rem; margin-bottom: 5rem">
                <RadzenText Text="Backend не работает" TextStyle="TextStyle.DisplayH1"
                    style="margin: 0; margin-bottom: 2rem" TextAlign="TextAlign.Center" />
                <RadzenText
                    Text="Извините, в данный момент служба ktvcss-backend не доступна, поэтому сайт не может получить какие-либо данные."
                    TextStyle="TextStyle.H6" style="margin: 0" TextAlign="TextAlign.Center" TagName="TagName.P" />
                <RadzenText Text="Администрация уже в курсе этой проблемы и занимается ее решением."
                    TextStyle="TextStyle.H6" style="margin: 0" TextAlign="TextAlign.Center" TagName="TagName.P" />
                @* <RadzenText Text="Пока мы чиним сайт, можете потренировать Ваш аим, лопая шарики!" TextStyle="TextStyle.H6"
                    style="margin: 0" TextAlign="TextAlign.Center" TagName="TagName.P" /> *@
                @* <RadzenStack AlignItems=AlignItems.Center JustifyContent="JustifyContent.Center">
                    <div id="score">Очки: 0</div>
                    <div id="game-area"></div>
                    <script src="game.js"></script>
                </RadzenStack> *@
            </RadzenColumn>
        </RadzenRow>
    </LayoutView>
}
else if (isMaintenance)
{
    <PageTitle>kTVCSS @@ Идет обновление</PageTitle>
    <LayoutView Layout="@typeof(MainLayout)">
        <RadzenRow>
            <RadzenColumn Size="12" style="margin-top: 5rem; margin-bottom: 5rem">
                <RadzenText Text="Сайт обновляется, вернитесь чуть позже" TextStyle="TextStyle.DisplayH3"
                    style="margin: 0; margin-bottom: 2rem" TextAlign="TextAlign.Center" />
            </RadzenColumn>
        </RadzenRow>
    </LayoutView>
}
else if (locked)
{
    <PageTitle>kTVCSS @@ Сайт закрыт</PageTitle>
    <LayoutView Layout="@typeof(MainLayout)">
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" style="margin-top: 5rem; margin-bottom: 5rem">
                <RadzenText Text="Сайт временно закрыт администраторами" TextStyle="TextStyle.DisplayH3"
                    style="margin: 0; margin-bottom: 2rem" TextAlign="TextAlign.Center" />
                <RadzenStack JustifyContent="JustifyContent.Center">
                    <RadzenPassword Disabled=passwordDisabled Style="width: 400px;margin:auto" Placeholder="Введите пароль"
                        @bind-Value="password" />
                    <RadzenButton Style="width: 300px;margin:auto" Click="SendPassword" Text="Отправить" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </LayoutView>
}

<style>
    #score {
        color: #fff;
        font-size: 2em;
        margin: 6px 0;
        font-family: Arial, sans-serif;
        z-index: 2;
    }

    #game-area {
        position: relative;
        width: 1280px;
        height: 540px;
        background: #1f2226;
        border: 1px solid #555555;
        border-radius: 10px;
        overflow: hidden;
    }

    .ball {
        position: absolute;
        border-radius: 50%;
        background: radial-gradient(circle, #ff4fad 0%, #a6006e 100%);
        box-shadow: 0 4px 20px #ff69ca65;
        cursor: pointer;
        transition: box-shadow 0.1s;
    }

    .ball:hover {
        box-shadow: 0 0 40px #fff0;
        filter: brightness(1.2);
    }
</style>

@code {
    private bool isApiWorking = true;
    private bool isMaintenance = false;
    private bool locked = false;
    private string password;
    private bool passwordDisabled = false;

    private async Task SendPassword()
    {
        passwordDisabled = true;

        await InvokeAsync(StateHasChanged);

        locked = !await http.GetFromJsonAsync<bool>($"/api/admins/getpassword?password={password}");

        await Task.Delay(2000);

        passwordDisabled = false;

        if (locked)
        {
            await DialogService.Alert(GetMessage("Неверный пароль"), "Ошибка", new AlertOptions() { OkButtonText = "Ок" });
        }

        await InvokeAsync(StateHasChanged);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SendPing();

            MaintenanceChecker();

            Locker();
        }
    }

    RenderFragment GetMessage(string text)
    {
        return __builder =>
        {
            <text>
                <b>@text</b>!
            </text>
        };
    }
    private async Task SendPing()
    {
        while (true)
        {
            try
            {
                await http.GetAsync("/api/ping");

                if (!isApiWorking)
                {
                    await DialogService.Alert(GetMessage("API проекта вновь работает, требуется обновить страницу"), "API", new
                    AlertOptions()
                    { OkButtonText = "Ок" });
                    nm.Refresh(true);
                }

                isApiWorking = true;
                InvokeAsync(StateHasChanged);
            }
            catch (Exception)
            {
                isApiWorking = false;
                InvokeAsync(StateHasChanged);
            }

            await Task.Delay(TimeSpan.FromMinutes(1));
        }
    }

    private async Task MaintenanceChecker()
    {
        while (true)
        {
            try
            {
                await http.GetStringAsync("/maintenance.flag");
                isMaintenance = true;
                InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                if (isMaintenance)
                {
                    await DialogService.Alert(GetMessage("Обновление сайта завершено, требуется обновить страницу"), "Обновление", new
                    AlertOptions()
                    { OkButtonText = "Ок" });
                    nm.Refresh(true);
                }

                isMaintenance = false;
                InvokeAsync(StateHasChanged);
            }

            await Task.Delay(TimeSpan.FromMinutes(1));
        }
    }

    private async Task Locker()
    {
        while (true)
        {
            try
            {
                locked = await http.GetFromJsonAsync<bool>("/api/admins/IsLockedAccess");
                InvokeAsync(StateHasChanged);
            }
            catch (Exception) { }

            await Task.Delay(TimeSpan.FromMinutes(1));
        }
    }
}