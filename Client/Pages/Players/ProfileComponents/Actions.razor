@using kTVCSS.Models.Db.Models.Chat.DTOs
@using kTVCSS.Models.Db.Models.Common
@using kTVCSS.Models.Db.Models.Statuses
@using kTVCSS.Models.Db.Models.Teams
@using kTVCSS.Models.Db.Models.Tickets
@using kTVCSS.Models.Models
@using kTVCSSBlazor.Client.Authorization
@using kTVCSSBlazor.Client.Extensions
@using kTVCSSBlazor.Db.Models.Players
@inject StateProvider AuthProvider
@inject NavigationManager nm
@inject HttpClient http
@inject TooltipService tooltipService
@inject NotificationService ns
@inject DialogService DialogService

@if (AuthProvider.CurrentUser.Id == player.MainInfo.Id || AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.Admin)
{
    <RadzenButton Click=OpenEditProfile Icon="edit" Text="Редактировать профиль"></RadzenButton>
}

@if (AuthProvider.CurrentUser.Id == player.MainInfo.Id)
{
    @if (player.Vip)
    {
        <RadzenButton @ref=clrBtn MouseEnter="@(args => ShowTooltip(args, "Обнулить стастистику, не затрагивая рейтинг"))" Click=ClearProfile Icon="clear" Text="Обнулить профиль"></RadzenButton>
    }
    else
    {
        <RadzenButton Disabled MouseEnter="@(args => ShowTooltip(args, "Обнуление доступно VIP игрокам"))" Icon="clear" Text="Обнулить профиль"></RadzenButton>
    }

    @if (player.MainInfo.IsPremiumVip)
    {
        <RadzenButton @ref=fullClrBtn MouseEnter="@(args => ShowTooltip(args, "Обнулить стастистику, в т.ч. и рейтинг"))" Click=FullClearProfile Icon="clear" Text="Полное обнуление"></RadzenButton>
    }

    @if (player.MainInfo.Block == 1)
    {
        <RadzenButton Icon="question_exchange" Text="Заявка на разбан" Click="OpenUnbanRequest" />
    }
}

@if (AuthProvider.CurrentUser.Id != player.MainInfo.Id)
{
    <RadzenButton Disabled=sndMsgButton Click=SendMessage Icon="message" Text="Написать"></RadzenButton>

    <RadzenButton Click=MakeReport Icon="warning" Text="Репорт"></RadzenButton>

    if (string.IsNullOrEmpty(player.TeamInfo.ID))
    {
        @if (AuthProvider.CurrentUser.IsCaptain)
        {
            <RadzenButton @ref=itBtn Click="SendInviteToTeam" Icon="add_business" Text="Пригласить в команду"></RadzenButton>
        }
    }

    @if (FriendRequest is null)
    {
        @if (isMeAFriend)
        {
            <RadzenButton Click=RemoveFriend Text="Удалить из друзей" Icon="remove_circle" />
        }
        else
        {
            <RadzenButton Click=AddFriend Text="Добавить в друзья" Icon="add_circle" />
        }
    }
    else
    {
        if (FriendRequest.Requester.PlayerID == AuthProvider.CurrentUser.Id)
        {
            <RadzenButton Click=CancelFriendRequest Text="Отменить заявку" Icon="remove_circle" />
        }
        else
        {
            <RadzenButton Click=AcceptFriendRequest Text="Принять заявку" Icon="add_circle" />
            <RadzenButton Click=RejectFriendRequest Text="Отменить заявку" Icon="remove_circle" />
        }
    }
}

@if (!(AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.MovieMaker))
{
    @if (player.Vip)
    {
        <RadzenButton Text="Лучшие моменты" Click="@(() => { nm.NavigateTo($"/player/highlights/{player.MainInfo.Id}"); })" Icon="movie"></RadzenButton>
    }
    else
    {
        <RadzenButton Disabled MouseEnter="@(args => ShowTooltip(args, "Чтобы с легкостью искать и скачивать лучшие моменты (сразу с тиками и описанием момента), необходимо приобрести VIP привилегию"))" Icon="movie" Text="Лучшие моменты"></RadzenButton>
    }
}

@if (player.IsPlaying)
{
    <RadzenButton Text="Перейти к матчу" Click="@(() => { nm.NavigateTo($"/match/{player.CurrentMatchId}"); })" Icon="online_prediction" />
}

@code {
    private async Task MakeReport()
    {
        var reasons = await http.GetFromJsonAsync<List<string>>("/api/actions/getreportreasons");

        var result = await DialogService.OpenAsync("Репорт", ds =>
        @<RadzenStack Gap="1.5rem">
            <p>Выберите причину жалобы</p>
            <RadzenDropDown @bind-Value=@_selectedReason Data=@reasons Style="width: 100%;" Name="DropDownBindValue" />
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Отправить" Click=@(() => { ds.Close(true); SendReport(); }) />
                    <RadzenButton Text="Отмена" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
        );
    }

    private async Task OpenUnbanRequest()
    {
        var result = await DialogService.OpenAsync("Заявка на разбан", ds =>
        @<RadzenStack Gap="1.5rem">
            <p>Пожалуйста, опишите коротко и ясно суть проблемы</p>
            <RadzenTextArea Rows="10" @bind-Value=@_unbanRequestString Style="width: 100%;" />
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Отправить" Click=@(() => { ds.Close(true); UnbanRequest(); }) />
                    <RadzenButton Text="Отмена" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
        );
    }
}
