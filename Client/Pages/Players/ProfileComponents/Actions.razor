@using kTVCSS.Models.Db.Models.Common
@using kTVCSS.Models.Db.Models.Statuses
@using kTVCSS.Models.Models
@using kTVCSSBlazor.Client.Authorization
@using kTVCSSBlazor.Client.Extensions
@using kTVCSSBlazor.Db.Models.Players
@inject StateProvider AuthProvider
@inject NavigationManager nm
@inject HttpClient http
@inject TooltipService tooltipService
@inject NotificationService ns
@inject DialogService DialogService

@if (AuthProvider.CurrentUser.Id == player.MainInfo.Id || AuthProvider.CurrentUser.IsAdmin)
{
    <RadzenButton Click=OpenEditProfile Icon="edit" Text="Редактировать профиль"></RadzenButton>
}

@if (AuthProvider.CurrentUser.Id == player.MainInfo.Id)
{
    @if (player.Vip)
    {
        <RadzenButton @ref=clrBtn MouseEnter="@(args => ShowTooltip(args, "Обнулить стастистику, не затрагивая рейтинг"))" Click=ClearProfile Icon="clear" Text="Обнулить профиль"></RadzenButton>
    }
    else
    {
        <RadzenButton Disabled MouseEnter="@(args => ShowTooltip(args, "Обнуление доступно VIP игрокам"))" Icon="clear" Text="Обнулить профиль"></RadzenButton>
    }

    @if (player.MainInfo.IsPremiumVip)
    {
        <RadzenButton @ref=fullClrBtn MouseEnter="@(args => ShowTooltip(args, "Обнулить стастистику, в т.ч. и рейтинг"))" Click=FullClearProfile Icon="clear" Text="Полное обнуление"></RadzenButton>
    }

    @if (player.MainInfo.Block == 1)
    {
        <RadzenButton Icon="question_exchange" Text="Заявка на разбан" Click="OpenUnbanRequest" />
    }
}

@if (AuthProvider.CurrentUser.Id != player.MainInfo.Id)
{
    <RadzenButton Click=SendMessage Icon="message" Text="Написать"></RadzenButton>

    <RadzenButton Click=MakeReport Icon="warning" Text="Репорт"></RadzenButton>

    if (!string.IsNullOrEmpty(player.TeamInfo.ID))
    {
        <RadzenButton @ref=itBtn Click="SendInviteToTeam" Icon="add_business" Text="Пригласить в команду"></RadzenButton>
    }

    @if (FriendRequest is null)
    {
        @if (isMeAFriend)
        {
            <RadzenButton Click=RemoveFriend Text="Удалить из друзей" Icon="remove_circle" />
        }
        else
        {
            <RadzenButton Click=AddFriend Text="Добавить в друзья" Icon="add_circle" />
        }
    }
    else
    {
        if (FriendRequest.Requester.PlayerID == AuthProvider.CurrentUser.Id)
        {
            <RadzenButton Click=CancelFriendRequest Text="Отменить заявку" Icon="remove_circle" />
        }
        else
        {
            <RadzenButton Click=AcceptFriendRequest Text="Принять заявку" Icon="add_circle" />
            <RadzenButton Click=RejectFriendRequest Text="Отменить заявку" Icon="remove_circle" />
        }
    }
}

@if (!AuthProvider.CurrentUser.IsAdmin)
{
    @if (player.Vip)
    {
        <RadzenButton Text="Лучшие моменты" Click="@(() => { nm.NavigateTo($"/player/highlights/{player.MainInfo.Id}"); })" Icon="movie"></RadzenButton>
    }
    else
    {
        <RadzenButton Disabled MouseEnter="@(args => ShowTooltip(args, "Чтобы с легкостью искать и скачивать лучшие моменты (сразу с тиками и описанием момента), необходимо приобрести VIP привилегию"))" Icon="movie" Text="Лучшие моменты"></RadzenButton>
    }
}

@code {
    [Parameter] public PlayerInfo player { get; set; }
    [Parameter] public bool isOnline { get; set; }
    [Parameter] public bool isMeAFriend { get; set; }
    [Parameter] public kTVCSS.Models.Db.Models.Players.FriendRequest? FriendRequest { get; set; }

    RadzenButton? clrBtn;
    RadzenButton? fullClrBtn;
    RadzenButton? itBtn;

    private void OpenEditProfile()
    {
        if (player.MainInfo.Block == 1)
        {
            ns.Notify(NotificationSeverity.Error, "Бан", "Редактирования профиля при наличии активного бана запрещено!");
            return;
        }
        nm.NavigateTo($"/editprofile/{player.MainInfo.Id}");
    }

    void ShowTooltip(ElementReference elementReference, string text, TooltipOptions options = null) => tooltipService.Open(elementReference, text, options);

    private async Task ClearProfile()
    {
        clrBtn.Disabled = true;

        ns.Notify(NotificationSeverity.Info, "Подождите", "Не закрывайте страницу, идет обнуление статистики...");

        ResetStatsResult result = await http.GetFromJsonAsync<ResetStatsResult>($"/api/players/ClearPlayerById?id={player.MainInfo.Id}");

        switch (result)
        {
            case ResetStatsResult.NotVip:
                {
                    ns.Notify(NotificationSeverity.Error, "Ошибка", "У Вас нет VIP!");
                    break;
                }
            case ResetStatsResult.NotEnoughMatches:
                {
                    ns.Notify(NotificationSeverity.Error, "Ошибка", "Чтобы обнулять статистику необходимо иметь минимум 10 матчей!");
                    break;
                }
            case ResetStatsResult.Live:
                {
                    ns.Notify(NotificationSeverity.Error, "Ошибка", "Нельзя обнулять статистику во время матча!");
                    break;
                }
            case ResetStatsResult.NotPremium:
                {
                    ns.Notify(NotificationSeverity.Error, "Ошибка", "У Вас нет PREMIUM VIP!");
                    break;
                }
            case ResetStatsResult.Fail:
                {
                    ns.Notify(NotificationSeverity.Error, "Ошибка", "Произошла непредвиденная ошибка, попробуйте позже!");
                    break;
                }
            case ResetStatsResult.Success:
                {
                    ns.Notify(NotificationSeverity.Success, "Успех", "Статистика обнулена!");

                    await Task.Delay(2000);

                    nm.Refresh(true);

                    return;
                }
        }

        clrBtn.Disabled = false;
    }

    private async Task FullClearProfile()
    {
        clrBtn.Disabled = true;
        fullClrBtn.Disabled = true;

        ns.Notify(NotificationSeverity.Info, "Подождите", "Не закрывайте страницу, идет обнуление статистики...");

        ResetStatsResult result = await http.GetFromJsonAsync<ResetStatsResult>($"/api/players/ClearFullPlayerById?id={player.MainInfo.Id}");

        switch (result)
        {
            case ResetStatsResult.NotVip:
                {
                    ns.Notify(NotificationSeverity.Error, "Ошибка", "У Вас нет VIP!");
                    break;
                }
            case ResetStatsResult.NotEnoughMatches:
                {
                    ns.Notify(NotificationSeverity.Error, "Ошибка", "Чтобы обнулять статистику необходимо иметь минимум 10 матчей!");
                    break;
                }
            case ResetStatsResult.Live:
                {
                    ns.Notify(NotificationSeverity.Error, "Ошибка", "Нельзя обнулять статистику во время матча!");
                    break;
                }
            case ResetStatsResult.NotPremium:
                {
                    ns.Notify(NotificationSeverity.Error, "Ошибка", "У Вас нет PREMIUM VIP!");
                    break;
                }
            case ResetStatsResult.Fail:
                {
                    ns.Notify(NotificationSeverity.Error, "Ошибка", "Произошла непредвиденная ошибка, попробуйте позже!");
                    break;
                }
            case ResetStatsResult.Success:
                {
                    ns.Notify(NotificationSeverity.Success, "Успех", "Статистика обнулена!");

                    await Task.Delay(2000);

                    nm.Refresh(true);

                    return;
                }
        }

        clrBtn.Disabled = false;
        fullClrBtn.Disabled = false;
    }

    private void SendMessage()
    {

    }

    private async Task CancelFriendRequest()
    {
        await http.GetAsync($"/api/friendsengine/CancelFriendRequest?requesterId={FriendRequest.Requester.PlayerID}&addresseeId={FriendRequest.Addressee.PlayerID}");

        ns.Notify(NotificationSeverity.Info, "kTVCSS", "Заявка отменена!");

        await Task.Delay(1000);

        nm.Refresh(true);
    }

    private async Task AcceptFriendRequest()
    {
        var result = await http.GetFromJsonAsync<FriendsEngineStatus>($"/api/friendsengine/AcceptFriendRequest?requesterId={FriendRequest.Requester.PlayerID}&addresseeId={FriendRequest.Addressee.PlayerID}");

        ns.Notify(result < FriendsEngineStatus.Ok ? NotificationSeverity.Error : NotificationSeverity.Success, "kTVCSS", EnumDescriptor.GetFriendStatus(result));

        await Task.Delay(1000);

        nm.Refresh(true);
    }

    private async Task RejectFriendRequest()
    {
        var result = await http.GetFromJsonAsync<FriendsEngineStatus>($"/api/friendsengine/RejectFriendRequest?requesterId={FriendRequest.Requester.PlayerID}&addresseeId={FriendRequest.Addressee.PlayerID}");

        ns.Notify(result < FriendsEngineStatus.Ok ? NotificationSeverity.Error : NotificationSeverity.Success, "kTVCSS", EnumDescriptor.GetFriendStatus(result));

        await Task.Delay(1000);

        nm.Refresh(true);
    }

    private void SendInviteToTeam()
    {
        itBtn.Disabled = true;
    }

    private async Task AddFriend()
    {
        var result = await http.GetFromJsonAsync<FriendsEngineStatus>($"/api/friendsengine/SendFriendRequest?requesterId={AuthProvider.CurrentUser.Id}&addresseeId={player.MainInfo.Id}");

        ns.Notify(result < FriendsEngineStatus.Ok ? NotificationSeverity.Error : NotificationSeverity.Success, "kTVCSS", EnumDescriptor.GetFriendStatus(result));

        await Task.Delay(1000);

        nm.Refresh(true);
    }

    private async Task RemoveFriend()
    {
        var result = await http.GetFromJsonAsync<FriendsEngineStatus>($"/api/friendsengine/RemoveFriend?playerId={AuthProvider.CurrentUser.Id}&friendId={player.MainInfo.Id}");

        ns.Notify(result < FriendsEngineStatus.Ok ? NotificationSeverity.Error : NotificationSeverity.Success, "kTVCSS", EnumDescriptor.GetFriendStatus(result));

        await Task.Delay(1000);

        nm.Refresh(true);
    }

    private string _selectedReason = string.Empty;

    private async Task MakeReport()
    {
        var reasons = await http.GetFromJsonAsync<List<string>>("/api/actions/getreportreasons");

        var result = await DialogService.OpenAsync("Репорт", ds =>
    @<RadzenStack Gap="1.5rem">
        <p>Выберите причину жалобы</p>
        <RadzenDropDown @bind-Value=@_selectedReason Data=@reasons Style="width: 100%;" Name="DropDownBindValue" />
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Отправить" Click=@(() => { ds.Close(true); SendReport(); }) />
                <RadzenButton Text="Отмена" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );
    }

    private async Task SendReport()
    {
        var report = new Report()
                {
                    FromID = AuthProvider.CurrentUser.Id,
                    FromPlayerName = AuthProvider.CurrentUser.Username,
                    Reason = _selectedReason,
                    ToID = player.MainInfo.Id,
                    ToPlayerName = player.MainInfo.Name
                };

        var response = await http.PostAsJsonAsync("/api/actions/sendreport", report);

        if (await response.ReadAsync<bool>())
        {
            ns.Notify(NotificationSeverity.Success, "Система репортов", "Репорт успешно отправлен, администрация рассмотрит его настолько быстро, насколько это возможно!", TimeSpan.FromSeconds(5));
        }
        else
        {
            ns.Notify(NotificationSeverity.Error, "Ошибка", "Вы уже отправляли жалобу на этого игрока!");
        }
    }

    private string _unbanRequestString = string.Empty;

    private async Task OpenUnbanRequest()
    {
        var result = await DialogService.OpenAsync("Заявка на разбан", ds =>
        @<RadzenStack Gap="1.5rem">
            <p>Пожалуйста, опишите коротко и ясно суть проблемы</p>
            <RadzenTextArea Rows="10" @bind-Value=@_unbanRequestString Style="width: 100%;" />
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Отправить" Click=@(() => { ds.Close(true); UnbanRequest(); }) />
                    <RadzenButton Text="Отмена" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
        );
    }

    private async Task UnbanRequest()
    {
        var response = await http.PostAsJsonAsync("/api/players/unbanrequest", new InitialUnbanRequest()
            {
                Message = _unbanRequestString,
                PlayerID = AuthProvider.CurrentUser.Id,
                PlayerName = AuthProvider.CurrentUser.Username
            });

        int ticketId = await response.Content.ReadFromJsonAsync<int>();

        ns.Notify(NotificationSeverity.Success, "Успех", "Ваша заявка на разбан успешно создана! Сейчас мы Вас перенаправим в созданный тикет", TimeSpan.FromSeconds(3));

        await Task.Delay(3000);

        nm.NavigateTo($"/ticket/{ticketId}");
    }
}
