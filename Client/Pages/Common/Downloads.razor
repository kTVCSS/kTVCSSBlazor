@page "/downloads"
@using System.Text.RegularExpressions
@using System.Globalization
@using kTVCSS.Models.Models
@using kTVCSSBlazor.Client.Components
@inject HttpClient http
@inject IJSRuntime js

<PageTitle>kTVCSS @@ Загрузки</PageTitle>

@if (ready)
{
    <RadzenText TextStyle="TextStyle.DisplayH3" TextAlign="TextAlign.Center" Text="Загрузки" />
    <RadzenText TextStyle="TextStyle.DisplayH5" TextAlign="TextAlign.Center" Text="Ниже приведен список карт, используемых на серверах проекта" />

    <RadzenStack Gap="0px" class="rz-mt-2" JustifyContent="JustifyContent.Center">
        @foreach (var file in files)
        {
            <RadzenButton Style="max-width: 400px;margin:auto" Variant=Variant.Text Text="@file.Name" Click="@(() => { DownloadFileAsync(file.ID, file.Name); })" />
        }
    </RadzenStack>
}
else
{
    <RadzenStack AlignItems=AlignItems.Center JustifyContent="JustifyContent.Center">
        <Loader Text="Идет загрузка страницы загрузок" />
    </RadzenStack>
}

<script>
    window.saveFileFromStream = async (filename, contentStreamReference) => {
      const arrayBuffer = await contentStreamReference.arrayBuffer();
      const blob = new Blob([arrayBuffer]);
      const url = URL.createObjectURL(blob);
      const anchorElement = document.createElement('a');
      anchorElement.href = url;
      anchorElement.download = filename ?? 'download';
      document.body.appendChild(anchorElement);
      anchorElement.click();
      document.body.removeChild(anchorElement);
      URL.revokeObjectURL(url);
    };
</script>

@code {
    private bool ready = false;
    List<FastDLItem> files = [];

    public async Task DownloadFileAsync(int id, string fileName)
    {
        var response = await http.GetAsync(
            $"api/fastdl/GetFile?id={id}",
            HttpCompletionOption.ResponseHeadersRead);

        response.EnsureSuccessStatusCode();

        var stream = await response.Content.ReadAsStreamAsync();

        using var dotNetStreamRef = new DotNetStreamReference(stream: stream);

        await js.InvokeVoidAsync(
            "saveFileFromStream",
            fileName,
            dotNetStreamRef
        );
    }

    protected override async Task OnInitializedAsync()
    {
        Task.Run(async () =>
        {
            files = await http.GetFromJsonAsync<List<FastDLItem>>("/api/fastdl/getfiles");

            ready = true;

            await InvokeAsync(StateHasChanged);
        });
    }
}
