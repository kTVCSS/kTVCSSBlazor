@page "/clientsettings"
@using Blazored.LocalStorage
@using kTVCSS.Models.Db.Models.Common
@using kTVCSSBlazor.Client.Authorization
@using kTVCSSBlazor.Client.Components
@using kTVCSSBlazor.Client.Services
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject StateProvider AuthProvider
@inject DialogService DialogService
@inject NavigationManager nm
@inject IMobileDetectionService mds
@inject ILocalStorageService localStorage
@inject HttpClient http
@inject ThemeService ThemeService

<PageTitle>kTVCSS @@ Настройки</PageTitle>

<RadzenRow JustifyContent="JustifyContent.Center">
    <RadzenColumn SizeXS="12" SizeSM="8">
        <RadzenStack>
            <RadzenText TextAlign="TextAlign.Center" TextStyle="TextStyle.DisplayH4">
                Настройки сайта
                <RadzenText Text="БЕТА" TextStyle="TextStyle.Subtitle2" />
            </RadzenText>

            <RadzenStack class="rz-p-2 rz-p-md-4 rz-p-lg-6">
                <RadzenCard Variant="Variant.Outlined">
                    <RadzenStack Orientation="Orientation.Horizontal" Wrap=FlexWrap.Wrap>
                        <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" Wrap=FlexWrap.Wrap class="rz-p-sm-2">
                            <RadzenLabel Text="Звук найденной игры" Component="DropDownTemplate" />
                            <RadzenDropDown @bind-Value=@selectedGameFoundSound Data=@sounds TextProperty="@nameof(Sound.Name)"
                                            Style="width: 250px;" Name="DropDownTemplate">
                                <ValueTemplate>
                                    @((context as Sound).Name)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" class="rz-p-sm-2">
                            <RadzenLabel Text="Громкость звука" Component="DropDownTemplate" />
                            <RadzenNumeric Style="width: 250px;" Min="0" Max="1" Step="0,1" @bind-Value=@volume
                                           InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "enter value" } })" />
                        </RadzenStack>
                    </RadzenStack>

                    <RadzenButton Style="display: flex;justify-self: end;margin-top: 2%;" Text="Сделать тест найденной игры" Click="ShowGameReady" />
                </RadzenCard>
            </RadzenStack>

            <RadzenStack class="rz-p-2 rz-p-md-4 rz-p-lg-6">
                <RadzenCard Variant="Variant.Outlined">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" class="rz-p-sm-2">
                            <RadzenLabel Text="Текущая тема оформления сайта" />
                            <RadzenDropDown Name="ThemeDropDown" TValue="string" Value="@ThemeService.Theme" ValueChanged="@ChangeTheme" Data="@Themes.All.Where(x => x.Text.Contains("Dark"))" TextProperty=@nameof(Theme.Text) ValueProperty=@nameof(Theme.Value)>
                            </RadzenDropDown>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenStack>
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>

<script>
    window.testSound = (track) => {
        console.log(@(volume));
        let audio = new Audio(track);
        audio.volume = @(volume)
        audio.play();
    }
</script>

@code {
    private List<string> citations = [];
    private List<Sound> sounds = [];

    private double _volume = 0.5;
    private double volume
    {
        get
        {
            return _volume;
        }
        set
        {
            _volume = value;

            localStorage.SetItemAsync("GFSoundLevel", value);
        }
    }

    private Sound _selectedGameFoundSound;
    private Sound selectedGameFoundSound
    {
        get
        {
            return _selectedGameFoundSound;
        }
        set
        {
            localStorage.SetItemAsync("GFSound", value);
            _selectedGameFoundSound = value;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            sounds.Add(new() { Name = "PornHub", Value = "/sounds/pornhub.mp3" });
            sounds.Add(new() { Name = "Seagull", Value = "/sounds/seagull.mp3" });
            sounds.Add(new() { Name = "RockMeme", Value = "/sounds/rockmeme.mp3" });
            sounds.Add(new() { Name = "Nani?", Value = "/sounds/nani.mp3" });
            sounds.Add(new() { Name = "Max Verstappen", Value = "/sounds/max-verstappen.mp3" });
            sounds.Add(new() { Name = "Lobotomy", Value = "/sounds/lobotomy.mp3" });
            sounds.Add(new() { Name = "NeDodgeYebok", Value = "/sounds/eblan.mp3" });

            var actualGameSound = await localStorage.GetItemAsync<Sound>("GFSound");

            if (actualGameSound is not null)
            {
                selectedGameFoundSound = sounds[sounds.IndexOf(sounds.FirstOrDefault(x => x.Name == actualGameSound.Name))];
            }
            else
            {
                localStorage.SetItemAsync("GFSound", new Sound() { Name = "PornHub", Value = "/sounds/pornhub.mp3" });
                selectedGameFoundSound = sounds[0];
            }

            var actualVolume = await localStorage.GetItemAsync<double>("GFSoundLevel");

            if (actualVolume == 0)
            {
                volume = 0.5;
            }
            else
            {
                volume = actualVolume;
            }

            localStorage.SetItemAsync("GFSoundLevel", volume);

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ShowGameReady()
    {
        var ctss = await http.GetFromJsonAsync<List<Citation>>("/api/citations");

        citations = ctss.Select(x => x.Text).OrderBy(x => new Random().Next()).Take(8).ToList();

        JSRuntime.InvokeVoidAsync("playGameReadySound");

        JSRuntime.InvokeVoidAsync("showNotification", "ИГРА НАЙДЕНА!");

        DialogService.OpenAsync("", ds =>
        @<RadzenStack Style="height: 100vh;max-height: 100%;overflow: hidden;" JustifyContent="JustifyContent.Center"
                              AlignItems="AlignItems.Center">
            <GameFound Strings="citations" />
        </RadzenStack>,
        new DialogOptions()
        {
            Width = "60vw",
            Height = "80vh",
            ShowClose = false,
            CloseDialogOnEsc = true,
            CloseDialogOnOverlayClick = true
        });

        Task.Run(async () =>
        {
            await Task.Delay(6500);

            DialogService.Close();
        });
    }

    public class Sound
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }

    void ChangeTheme(string value)
    {
        ThemeService.SetTheme(value);

        JSRuntime.InvokeVoidAsync("localStorage.setItem", "kTVCSSTheme", value);
    }
}