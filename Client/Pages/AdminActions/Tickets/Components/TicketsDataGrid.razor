@using kTVCSS.Models.Db.Models.Tickets
@using kTVCSSBlazor.Client.Services
@inject NavigationManager NavigationManager
@inject IMobileDetectionService mds
@inject DialogService DialogService

@if (ready)
{
    <RadzenDataGrid EmptyText="Новых тикетов пока что нет" Responsive=isMobile Density="Density.Default" Data="@DataSource" AllowColumnResize>
        <HeaderTemplate>
            <RadzenStack Style="width: 100%" JustifyContent="JustifyContent.Center" Orientation="Orientation.Horizontal">
                <RadzenText class="rz-pl-4" Style="margin-top: auto;" TextStyle="TextStyle.DisplayH5" Text="@Title"></RadzenText>
            </RadzenStack>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Width="10%" Context="ctx" Title="ID" Property="TicketId" />
            <RadzenDataGridColumn Width="16%" Title="Статус" Context="ctx">
                <Template>
                    <div style="display: flex; align-items: center; gap: 8px; margin: auto;">
                        @switch (ctx.Status)
                        {
                            case kTVCSS.Models.Db.Models.Statuses.TicketStatus.Created:
                                {
                                    <div style="width: 12px; height: 12px; border-radius: 50%; background: #46ff4e;"></div>
                                    <RadzenText Style="margin:initial; font-size: 14px;" Text="Открыт" />
                                    break;
                                }
                            case kTVCSS.Models.Db.Models.Statuses.TicketStatus.InProcess:
                                {
                                    <div style="width: 12px; height: 12px; border-radius: 50%; background: #ff9651;"></div>
                                    <RadzenText Style="margin:initial; font-size: 14px;" Text="В процессе" />
                                    break;
                                }
                            case kTVCSS.Models.Db.Models.Statuses.TicketStatus.Closed:
                                {
                                    <div style="width: 12px; height: 12px; border-radius: 50%; background: #ff4646;"></div>
                                    <RadzenText Style="margin:initial; font-size: 14px;" Text="Закрыт" />
                                    break;
                                }
                        }
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="22%" Title="Игрок" Context="ctx">
                <Template>
                    <RadzenText Style="margin:initial; font-size: 14px;" Text="@ctx.PlayerInfo?.MainInfo.Name" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="16%" Context="ctx" Title="Дата создания">
                <Template>
                    @ctx.CreatedAt.ToLocalFromMoscow().ToString("dd.MM.yyyy HH:mm")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="16%" Context="ctx" Title="Дата обновления">
                <Template>
                    @ctx.UpdatedAt.ToLocalFromMoscow().ToString("dd.MM.yyyy HH:mm")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="" Context="ctx">
                <Template>
                    @if (isMobile)
                    {
                        <RadzenButton Text="Перейти" Click="@(() => { NavigationManager.NavigateTo($"/ticket/{ctx.TicketId}"); })" />
                    }
                    else
                    {
                        <RadzenButton Text="Открыть" Click="@(() => { ShowTicket(ctx.TicketId); })" />
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <kTVCSSBlazor.Client.Components.ComponentLoader Text="Идет загрузка таблицы" />
}

@code {
    [Parameter] public List<Ticket> DataSource { get; set; } = [];
    [Parameter] public string Title { get; set; }

    private bool isMobile = false;
    private bool ready = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isMobile = await mds.IsMobileDeviceAsync();

            ready = true;

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ShowTicket(int id)
    {
        await DialogService.OpenAsync("Тикет #" + id, ds =>
                            @<TicketPage Id="@id" />
        , options: new DialogOptions() { ShowClose = true, CloseDialogOnEsc = true, CloseDialogOnOverlayClick = false, Width = "1280px", Height = "720px" });
    }
    }
}
