@page "/tickets"
@page "/tickets/{Id:int}"
@using kTVCSSBlazor.Client.Authorization
@using kTVCSSBlazor.Client.Components
@using kTVCSSBlazor.Client.Services
@using kTVCSSBlazor.Db
@using kTVCSSBlazor.Db.Models.Teams
@inject StateProvider AuthProvider
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject HttpClient http
@implements IDisposable
@inject DialogService DialogService

<PageTitle>kTVCSS @@ Тикеты</PageTitle>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            @if (ready)
            {
                @if (!Id.HasValue)
                {
                    @if (AuthProvider.CurrentUser is not null)
                    {
                        @if (AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.Moderator)
                        {
                            <RadzenStack>
                                @if (_tickets.Any())
                                {
                                    <kTVCSSBlazor.Client.Pages.AdminActions.Tickets.Components.TicketsDataGrid DataSource="_tickets" Title="Открытые тикеты" />
                                }
                                <kTVCSSBlazor.Client.Pages.AdminActions.Tickets.Components.TicketsDataGrid DataSource="_ticketsclosed" Title="Закрытые тикеты" />
                            </RadzenStack>
                        }
                        else
                        {
                            <NoAccess />
                        }
                    }
                }
                else
                {
                    if (AuthProvider.CurrentUser is not null)
                    {
                        if (AuthProvider.CurrentUser.Id == Id)
                        {
                            <RadzenStack JustifyContent="JustifyContent.Center">

                                @if (_tickets.Any())
                                {
                                    <kTVCSSBlazor.Client.Pages.AdminActions.Tickets.Components.TicketsDataGrid DataSource="_tickets" Title="Открытые тикеты" />
                                }
                                else
                                {
                                    <RadzenButton Click=Open Variant=Variant.Text Text="Открытых тикетов нет. Нажмите сюда, чтобы создать новый." />
                                }

                                @if (_ticketsclosed.Any())
                                {
                                    <kTVCSSBlazor.Client.Pages.AdminActions.Tickets.Components.TicketsDataGrid DataSource="_ticketsclosed" Title="Закрытые тикеты" />
                                }
                            </RadzenStack>
                        }
                        else
                        {
                            <NoAccess />
                        }
                    }
                }
            }
            else
            {
                <RadzenRow JustifyContent="JustifyContent.Center">
                    <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <Loader Size="ProgressBarCircularSize.Medium" Text="Идет загрузка страницы тикетов" />
                    </RadzenStack>
                </RadzenRow>
            }
        </Authorized>
        <NotAuthorized>
            <NoAccess />
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private async Task Open()
    {
        var result = await DialogService.OpenAsync("Создание тикета", ds =>
    @<RadzenStack Gap="1.5rem">
    <p>Пожалуйста, опишите коротко и ясно суть проблемы</p>
    <RadzenTextArea Rows="10" @bind-Value=@ticketText Style="width: 100%;" />
    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Text="Создать" Click=@(() => { ds.Close(true); CreateTicket(); }) />
            <RadzenButton Text="Отмена" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
        </RadzenStack>
    </RadzenStack>
</RadzenStack>
    );
    }
}