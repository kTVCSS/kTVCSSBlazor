@using Radzen.Blazor.Rendering
@using kTVCSS.Models.Db.Models.Common
@using kTVCSS.Models.Models
@using kTVCSSBlazor.Client.Authorization
@using kTVCSSBlazor.Client.Components
@using kTVCSSBlazor.Client.Services
@using kTVCSSBlazor.Db.Models.Arcticles
@using kTVCSSBlazor.Db.Models.UserFeed
@inject HttpClient http
@inject StateProvider AuthProvider
@inject NotificationService NotificationService
@implements IDisposable
@inject DialogService DialogService
@inject IJSRuntime js
@inject WindowSizeService WindowSize

<RadzenStack>
    <RadzenRow JustifyContent="JustifyContent.Center">
        <RadzenColumn SizeSM="12" SizeMD="9">
            <RadzenStack>
                <RadzenCard>
                    <RadzenStack>
                        <RadzenFormField Text="Что у вас нового?" Style="width: 100%;">
                            @if (newPostContent.Length > 0)
                            {
                                <RadzenTextArea Rows="10" @bind-Value="@newPostContent" />
                            }
                            else
                            {
                                <RadzenTextBox @bind-Value="@newPostContent" />
                            }
                        </RadzenFormField>
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenButton Click="PostNews" Style="" Text="Опубликовать" Icon="post_add" />
                            <RadzenUpload ChooseText="Прикрепить вложение" Multiple="false" Auto Change=@OnClientChange
                            InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})" />
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
                <RadzenStack>
                    @if (Posts.Any())
                    {
                        @foreach (var post in Posts)
                        {
                            <RadzenCard>
                                <RadzenStack>
                                    <RadzenStack Orientation="Orientation.Horizontal">
                                        <img style="width: 60px;height: 60px; border-radius: 128px" src="@post.AuthorAvatar" class="rz-avatar" alt="Аватар" />
                                        <RadzenStack>
                                            <RadzenLink Style="color: var(--rz-white);" Path="@(string.Concat("/player/", post.AuthorId))">@post.AuthorName</RadzenLink>
                                            <small>@post.PostDate.ToString("dd.MM.yyyy HH:mm")</small>
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenStack>
                                <div class="post-content">
                                    <p><RadzenMarkdown AllowHtml Text="@post.Content" /></p>
                                </div>
                                @if (!string.IsNullOrEmpty(post.MediaUrl))
                                {
                                    if (post.MediaType == MediaType.Image)
                                    {
                                        <RadzenImage Click=@(() => { currentFile = post.MediaUrl; ShowImage(); }) Path="@post.MediaUrl" Style="max-width: 640px;width: 100%;max-height: 480px; cursor: pointer;" />
                                    }
                                    else if (post.MediaType == MediaType.Video)
                                    {
                                        <video controls style="width: 100%;max-width: 640px; max-height: 360px" src="@post.MediaUrl" />
                                    }
                                }
                                <div class="rz-my-2">
                                    <RadzenStack Gap="8px" Orientation="Orientation.Horizontal">
                                        <RadzenButton Icon="thumb_up" Text="@post.LikesCount.ToString()" Click="() => LikePost(post)" />
                                        <RadzenButton Icon="thumb_down" Text="@post.DislikesCount.ToString()" Click="() => DislikePost(post)" />
                                        @if (AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.Moderator || post.AuthorId == AuthProvider.CurrentUser.Id)
                                        {
                                            <RadzenButton Click="() => RemovePost(post.PostId)" Icon="remove_circle" Text="Удалить"></RadzenButton>
                                        }
                                    </RadzenStack>
                                </div>
                                <div class="post-comments">
                                    @if (post.Comments.Any())
                                    {
                                        <h4>Комментарии</h4>
                                        @if (post.Comments.Count > 3)
                                        {
                                            @foreach (var comment in post.Comments.Take(3))
                                            {
                                                <RadzenStack>
                                                    <RadzenStack Orientation="Orientation.Horizontal">
                                                        <img style="width: 30px;height: 30px;border-radius: 128px" src="@comment.AuthorAvatar" class="rz-avatar" alt="Аватар" />
                                                        <RadzenStack Gap="4px">
                                                            <RadzenLink Style="color: var(--rz-white);" Path="@(string.Concat("/player/", comment.AuthorId))">@comment.AuthorName</RadzenLink>
                                                            <div>@comment.Content</div>
                                                            <RadzenStack AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal">
                                                                <small>@comment.CommentDate.ToString("dd.MM.yyyy HH:mm")</small>
                                                                <RadzenButton Click="@(() => { DeleteComment(post, comment); })" Size="ButtonSize.Small" Variant="Variant.Text" Text="Удалить" />
                                                            </RadzenStack>
                                                        </RadzenStack>
                                                    </RadzenStack>
                                                </RadzenStack>
                                            }
                                            <RadzenAccordion>
                                                <Items>
                                                    <RadzenAccordionItem Text="Показать остальные комментарии">
                                                        @foreach (var comment in post.Comments.Skip(3))
                                                        {
                                                            <RadzenStack>
                                                                <RadzenStack Orientation="Orientation.Horizontal">
                                                                    <img style="width: 30px;height: 30px;border-radius: 128px" src="@comment.AuthorAvatar" class="rz-avatar" alt="Аватар" />
                                                                    <RadzenStack Gap="4px">
                                                                        <RadzenLink Style="color: var(--rz-white);" Path="@(string.Concat("/player/", comment.AuthorId))">@comment.AuthorName</RadzenLink>
                                                                        <div>@comment.Content</div>
                                                                        <RadzenStack AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal">
                                                                            <small>@comment.CommentDate.ToString("dd.MM.yyyy HH:mm")</small>
                                                                            <RadzenButton Click="@(() => { DeleteComment(post, comment); })" Size="ButtonSize.Small" Variant="Variant.Text" Text="Удалить" />
                                                                        </RadzenStack>
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                            </RadzenStack>
                                                        }
                                                    </RadzenAccordionItem>
                                                </Items>
                                            </RadzenAccordion>
                                        }
                                        else
                                        {
                                            @foreach (var comment in post.Comments)
                                            {
                                                <RadzenStack>
                                                    <RadzenStack Orientation="Orientation.Horizontal">
                                                        <img style="width: 30px;height: 30px;border-radius: 128px" src="@comment.AuthorAvatar" class="rz-avatar" alt="Аватар" />
                                                        <RadzenStack Gap="4px">
                                                            <RadzenLink Style="color: var(--rz-white);" Path="@(string.Concat("/player/", comment.AuthorId))">@comment.AuthorName</RadzenLink>
                                                            <div>@comment.Content</div>
                                                            <RadzenStack AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal">
                                                                <small>@comment.CommentDate.ToString("dd.MM.yyyy HH:mm")</small>
                                                                <RadzenButton Click="@(() => { DeleteComment(post, comment); })" Size="ButtonSize.Small" Variant="Variant.Text" Text="Удалить" />
                                                            </RadzenStack>
                                                        </RadzenStack>
                                                    </RadzenStack>
                                                </RadzenStack>
                                            }
                                        }
                                    }
                                </div>
                                <RadzenStack>
                                    <RadzenFormField Text="Комментарий" Style="width: 100%;">
                                        <RadzenTextBox @bind-Value="@post.NewComment" />
                                    </RadzenFormField>
                                    <RadzenButton Style="width: 200px" Icon="send" Text="Отправить" Click="() => AddComment(post)"></RadzenButton>
                                </RadzenStack>
                            </RadzenCard>
                        }
                    }
                    else
                    {
                        <RadzenStack AlignItems=AlignItems.Center JustifyContent="JustifyContent.Center">
                            <Loader Text="Идет загрузка постов" />
                        </RadzenStack>
                    }
                </RadzenStack>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    private async Task ShowImage()
    {
        await DialogService.OpenAsync("", ds =>
        @<RadzenStack Style="height: 100%;">
            <RadzenImage Path="@currentFile" Style="width: 100%; height: 100%;object-fit:contain" />
        </RadzenStack>
    , options: new DialogOptions() { Width = windowWidth - 200 + "px", Height = windowHeight - 200 + "px", CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true, ShowClose = true });
    }
}