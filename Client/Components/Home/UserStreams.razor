@using kTVCSSBlazor.Client.Authorization
@using kTVCSSBlazor.Db.Models.Home
@inject HttpClient http
@inject StateProvider AuthProvider
@inject DialogService DialogService

<RadzenStack Style="padding-bottom: 8px" Orientation=Orientation.Horizontal JustifyContent="JustifyContent.SpaceBetween">
    <RadzenText TextStyle=TextStyle.DisplayH4 Text="Стримы игроков проекта" />
    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                @if (AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.Admin)
                {
                    <RadzenButton Variant="Variant.Text" Click="OpenStreamAddition" Text="Добавить новый стрим" />
                }
            </Authorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</RadzenStack>

<RadzenRow JustifyContent="JustifyContent.Center">
    <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        @foreach (var stream in _streams)
        {
            <RadzenCard Style="width: 854px">
                <iframe src="@stream.Channel" frameborder="0" scrolling="no" allowfullscreen="true" style="width: 100%;height: 480px">
                </iframe>
                <RadzenStack class="rz-mt-2" JustifyContent=JustifyContent.Start Orientation="Orientation.Horizontal">
                    <RadzenStack AlignItems=AlignItems.Center Orientation="Orientation.Horizontal">
                        <img style="height: 40px;border-radius: 128px;" src="@stream.PlayerAvatar" />
                        <RadzenLink Style="color: white" Text="@stream.PlayerName" Path="@string.Concat("/player/", stream.PlayerId)" />
                    </RadzenStack>
                    <CascadingAuthenticationState>
                        <AuthorizeView>
                            <Authorized>
                                @if (AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.Admin)
                                {
                                    <RadzenButton Variant="Variant.Text" Click="@(() => { RemoveStream(stream.Id); })" Text="Удалить" />
                                }
                            </Authorized>
                        </AuthorizeView>
                    </CascadingAuthenticationState>
                </RadzenStack>
            </RadzenCard>
        }
    </RadzenStack>
</RadzenRow>

@code {
    private async Task OpenStreamAddition()
    {
        var result = await DialogService.OpenAsync("Добавление нового стрима", ds =>
        @<RadzenStack Gap="1.5rem">
            <RadzenStack Gap="0px">
                <RadzenText>Добавление нового стрима</RadzenText>
            </RadzenStack>
            <RadzenTextBox Placeholder="Название стрима" @bind-Value=@streamName Style="width: 100%;" />
            <RadzenTextBox Placeholder="Ссылка на Twitch канал" @bind-Value=@streamLink Style="width: 100%;" />
            <RadzenNumeric Placeholder="ID игрока" @bind-Value=@profileId Style="width: 100%;" />
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Создать" Click=@(() => { ds.Close(true); AddStream(); }) />
                    <RadzenButton Text="Отмена" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
        );
    }
}
