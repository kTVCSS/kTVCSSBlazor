@using kTVCSSBlazor.Client.Authorization
@using kTVCSSBlazor.Db.Models.Home
@inject HttpClient http
@inject StateProvider AuthProvider

<RadzenStack Style="padding-bottom: 8px" Orientation=Orientation.Horizontal JustifyContent="JustifyContent.SpaceBetween">
    <RadzenText TextStyle=TextStyle.DisplayH4 Text="Стримы игроков проекта" />
    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                @if (AuthProvider.CurrentUser.IsAdmin)
                {
                    <RadzenLink Text="Добавить новый стрим" Path="/addstream" />
                }
            </Authorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</RadzenStack>

<RadzenRow JustifyContent="JustifyContent.Center">
    <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        @foreach (var stream in _streams)
        {
            <RadzenCard Style="width: 854px">
                <iframe src="@stream.Channel" frameborder="0" scrolling="no" allowfullscreen="true" style="width: 100%;height: 480px">
                </iframe>
                <RadzenStack class="rz-mt-2" JustifyContent=JustifyContent.Start Orientation="Orientation.Horizontal">
                    <RadzenStack AlignItems=AlignItems.Center Orientation="Orientation.Horizontal">
                        <img style="height: 40px;border-radius: 128px;" src="@stream.PlayerAvatar" />
                        <RadzenLink Style="color: white" Text="@stream.PlayerName" Path="@string.Concat("/player/", stream.PlayerId)" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>
        }
    </RadzenStack>
</RadzenRow>

@code {
    List<UserStream> _streams = [];

    protected override async Task OnInitializedAsync()
    {
        _streams = await http.GetFromJsonAsync<List<UserStream>>("/api/userstreams");

        foreach (var stream in _streams)
        {
            stream.Channel = $"https://player.twitch.tv/?channel={stream.Name}&parent=ktvcss.ru";
        }
    }
}
