@page "/streamwidget/{Id:int}"
@using Radzen
@using Radzen.Blazor
@using kTVCSSBlazor.Db.Models.Players
@layout EmptyLayout
@inject HttpClient http
@implements IDisposable

@if (player is not null)
{
    <div class="player-widget">
        <RadzenCard class="main-card">
            <div class="header-section">
                <div class="level-badge">
                    <img src="@player.RankUrl" alt="User Profile" style="width: 56px; height: 100%; border-radius: 50%;">
                </div>
                <div class="player-info">
                    <h3>@player.MainInfo.Name</h3>
                    <div class="rank">∞@player.MainInfo.MMR</div>
                </div>
                <div class="main-stats">
                    <div class="stat-item">
                        <div class="stat-value">@player.MainInfo.ADR</div>
                        <div class="stat-label">ADR</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">@player.MainInfo.AVG</div>
                        <div class="stat-label">AVG</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">@player.MainInfo.KDR</div>
                        <div class="stat-label">KDR</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">@player.MainInfo.KR</div>
                        <div class="stat-label">KR</div>
                    </div>
                </div>
            </div>

            <div class="detailed-stats">
                <RadzenText class="stat-line">ACE: @player.Highlights.Aces</RadzenText>
                <RadzenText class="stat-line">QUADRO: @player.Highlights.Quadros</RadzenText>
                <RadzenText class="stat-line">TRIPLE: @player.Highlights.Tripples</RadzenText>
                <RadzenText class="stat-line">ENTRY: @player.Highlights.OpenFrags</RadzenText>

                <div class="match-history">
                    @foreach (var match in player.LastTwentyMatches.OrderByDescending(x => x.DateTime).Take(5))
                    {
                        if (match.Victory)
                        {
                            <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="W" />
                        }
                        else
                        {
                            <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="L" />
                        }
                    }
                </div>
            </div>

            @if (levelData != null)
            {
                <div class="level-section">
                    <img style="height: 60px;width:60px" src="/images/ktvcss.webp" />
                    <div class="level-text">@player.MainInfo.RankName</div>
                    <RadzenProgressBar Value="@(mmr - levelData.StartMMR)" Max="@(levelData.EndMMR - levelData.StartMMR)"
                        ShowValue="false" Style="width: 200px;" />
                    <div class=level-text>TOP-@player.MainInfo.Position</div>
                </div>
            }
        </RadzenCard>
    </div>
}

<style>
    body {
        background: transparent !important;
    }

    .player-widget {
        width: 550px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: transparent;
    }

    .rz-badge {
        width: 20px;
        height: 20px;
    }

    .main-card {
        background: rgba(20, 20, 20, 0.95);
        color: white;
        padding: 15px;
        border: 2px solid rgba(255, 255, 255, 0.1);
    }

    .header-section {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 15px;
        padding-bottom: 15px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .level-badge {
        font-size: 24px;
    }

    .player-info h3 {
        margin: 0;
        font-size: 20px;
        font-weight: bold;
    }

    .rank {
        font-size: 16px;
        color: #aaa;
    }

    .main-stats {
        display: flex;
        gap: 25px;
        margin-left: auto;
    }

    .stat-item {
        text-align: center;
    }

    .stat-value {
        font-size: 22px;
        font-weight: bold;
    }

    .stat-label {
        font-size: 12px;
        color: #888;
    }

    .detailed-stats {
        display: flex;
        gap: 20px;
        margin-bottom: 15px;
        padding: 10px 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .stat-line {
        font-size: 14px;
    }

    .firepower-section {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 15px;
        padding: 10px 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .firepower-label {
        font-weight: bold;
    }

    .flags {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .id-text {
        font-size: 13px;
        color: #aaa;
    }

    .match-history {
        display: flex;
        gap: 5px;
        margin-left: auto;
    }

    .level-section {
        display: flex;
        align-items: center;
        gap: 15px;
        justify-content: space-between;
    }

    .level-text {
        font-weight: bold;
    }

    .elo-text {
        font-size: 12px;
        color: #888;
        margin-left: auto;
    }

    .footer-section {
        display: flex;
        justify-content: space-between;
        padding-top: 10px;
    }

    .rating {
        font-size: 18px;
        font-weight: bold;
    }
</style>

@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public int Id { get; set; }

    private class LevelInfo
    {
        public string Name { get; set; }
        public int StartMMR { get; set; }
        public int EndMMR { get; set; }
    }

    private LevelInfo GetLevelData(double mmr)
    {
        var levels = new List<LevelInfo>
{
new LevelInfo { Name = "LEVEL-I", StartMMR = 1, EndMMR = 800 },
new LevelInfo { Name = "LEVEL-II", StartMMR = 801, EndMMR = 950 },
new LevelInfo { Name = "LEVEL-III", StartMMR = 951, EndMMR = 1100 },
new LevelInfo { Name = "LEVEL-IV", StartMMR = 1101, EndMMR = 1250 },
new LevelInfo { Name = "LEVEL-IX", StartMMR = 1851, EndMMR = 2000 },
new LevelInfo { Name = "LEVEL-V", StartMMR = 1251, EndMMR = 1400 },
new LevelInfo { Name = "LEVEL-VI", StartMMR = 1401, EndMMR = 1550 },
new LevelInfo { Name = "LEVEL-VII", StartMMR = 1551, EndMMR = 1700 },
new LevelInfo { Name = "LEVEL-VIII", StartMMR = 1701, EndMMR = 1850 },
new LevelInfo { Name = "LEVEL-X", StartMMR = 2001, EndMMR = 10000 }
};

        return levels.FirstOrDefault(l => mmr >= l.StartMMR && mmr <= l.EndMMR);
    }

    private PlayerInfo player;
    private double mmr;
    LevelInfo levelData;

    private async Task LoadData()
    {
        while (!dispose)
        {
            if (dispose)
            {
                return;
            }

            player = await http.GetFromJsonAsync<PlayerInfo>($"/api/players/getplayerbyid?id={Id}");

            mmr = (double)player.MainInfo.MMR;

            levelData = GetLevelData(mmr);

            await InvokeAsync(StateHasChanged);

            await Task.Delay(TimeSpan.FromMinutes(3));
        }
    }

    public bool dispose = false;

    public void Dispose()
    {
        dispose = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadData();
        }
    }
}