@page "/register"
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen.Blazor
@using System.Text.RegularExpressions
@using kTVCSS.Models.Models
@using kTVCSSBlazor.Client.Authorization
@inject NavigationManager NavigationManager
@inject StateProvider AuthProvider
@inject NotificationService notify

<PageTitle>kTVCSS @@ Регистрация в системе</PageTitle>

<CascadingAuthenticationState>
    <AuthorizeView Context="auth">
        <Authorized>

        </Authorized>
        <NotAuthorized>
            <RadzenRow JustifyContent="JustifyContent.Center">
                <RadzenColumn SizeSM="12" SizeMD="6">
                    <RadzenStack JustifyContent="JustifyContent.Center">
                        <RadzenImage class="rz-m-auto" Path="/images/logo_ktv.png" Style="width: 256px;" AlternateText="community" />
                        <RadzenTemplateForm class="rz-py-4 rz-px-4" Data=@("LoginWithDefaultValues")>
                            <RadzenLogin FormFieldVariant="Variant.Flat" LoginText="Зарегистрироваться" UserText="Логин" PasswordText="Пароль" AllowRegister="false"
                            AllowResetPassword="false" Username=@userName Password=@password RegisterMessageText=""
                            Login=@(args => OnRegister(args, "Login with default values")) />
                        </RadzenTemplateForm>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    string userName = "";
    string password = "";
    bool rememberMe = true;

    public bool IsValidLogin(string login)
    {
        if (string.IsNullOrEmpty(login))
            return false;

        if (login.Length > 30)
            return false;

        // Регулярное выражение: от 1 до 30 символов, каждый из которых – буква, цифра, '_' или '-'
        const string pattern = @"^[A-Za-z0-9_-]+$";
        return Regex.IsMatch(login, pattern);
    }

    private async Task OnRegister(LoginArgs args, string name)
    {
        if (!IsValidLogin(args.Username))
        {
            notify.Notify(new NotificationMessage()
                {
                    CloseOnClick = true,
                    Detail = "Логин содержит недопустимые знаки!",
                    Summary = "Ошибка регистрации",
                    Severity = NotificationSeverity.Error,
                    Duration = 5000,
                    Payload = DateTime.Now
                });

            return;
        }

        RegisterResult result = await AuthProvider.SignupAsync(args.Username, args.Password);

        if (result != RegisterResult.Ok)
        {
            if (result == RegisterResult.Exist)
            {
                notify.Notify(new NotificationMessage()
                    {
                        CloseOnClick = true,
                        Detail = "Такой логин уже используется",
                        Summary = "Ошибка регистрации",
                        Severity = NotificationSeverity.Error,
                        Duration = 5000,
                        Payload = DateTime.Now
                    });
            }
            
            return;
        }

        await AuthProvider.LoginAsync(args.Username, args.Password);

        notify.Notify(NotificationSeverity.Success, "Успех", $"Добро пожаловать, {args.Username}. Сейчас вы будете перенаправлены на главную страницу!", TimeSpan.FromSeconds(5));

        await Task.Delay(1500);

        NavigationManager.NavigateTo("/", true);

        StateHasChanged();
    }
}
