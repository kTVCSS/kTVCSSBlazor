@using Blazored.LocalStorage
@using Microsoft.AspNetCore.SignalR.Client
@using kTVCSS.Models.Db.Models.Chat.DTOs
@using kTVCSS.Models.Db.Models.Common
@using kTVCSS.Models.Db.Models.Teams
@using kTVCSS.Models.Models
@using kTVCSS.Models;
@using kTVCSSBlazor.Client.Authorization
@using kTVCSSBlazor.Client.Components
@using kTVCSSBlazor.Client.Components.Home
@using kTVCSSBlazor.Client.Services
@using kTVCSSBlazor.Db.Models.Players
@using static kTVCSSBlazor.Client.Pages.Common.ClientSettings
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject KeepAliveService KeepAliveService
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject HttpClient http
@inject StateProvider AuthProvider
@inject ChatHubService ChatHub
@inject MMService mm
@implements IDisposable
@inject IMobileDetectionService mds
@inject WindowSizeService WindowSize
@inject ILocalStorageService localStorage

<RadzenComponents />
<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />

<script src="scripts/layout.js"></script>

@if (ready)
{
    <RadzenLayout style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body' 'rz-footer rz-footer';">
        <RadzenHeader>
            <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
                <RadzenColumn Size="5">
                    <RadzenSidebarToggle Click="@SidebarToggleClick"></RadzenSidebarToggle>
                </RadzenColumn>
                <RadzenColumn Size="7">
                    <RadzenStack AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem" class="rz-px-2">
                        @* <CulturePicker /> *@
                        <CascadingAuthenticationState>
                            <AuthorizeView Context="auth">
                                <Authorizing>
                                    <Loader Size="ProgressBarCircularSize.Small" />
                                </Authorizing>
                                <Authorized>
                                    <RadzenStack Orientation="Orientation.Horizontal">
                                        @if (!isMobile) {
                                            <RadzenButton Style="height: 32px;align-self:center;" Size="ButtonSize.Small" Click="ShowMM" Text="Играть" Icon="globe" />
                                        }
                                        else {
                                            <RadzenButton Style="height: 32px;width:32px;align-self:center;" Size="ButtonSize.Small" Click="ShowMM" Text="" Icon="globe" />
                                        }
                                        <NotificationBell />
                                        <RadzenProfileMenu Style="position: relative">
                                            <Template>
                                                @if (AuthProvider.CurrentUser.RankPicture is not null)
                                                {
                                                    <RadzenStack JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal">
                                                        <img src="@AuthProvider.CurrentUser.RankPicture" alt="User Profile" style="width: 32px; height: 100%; border-radius: 50%;">
                                                        <RadzenText Style="margin: auto;" TextAlign="TextAlign.Center" Text="@AuthProvider.CurrentUser.Username" />
                                                    </RadzenStack>
                                                }
                                            </Template>
                                            <ChildContent>
                                                <RadzenProfileMenuItem Text="Профиль" Path="@(string.Concat("/player/", AuthProvider.CurrentUser.Id))" Icon="account_circle"></RadzenProfileMenuItem>
                                                @if (string.IsNullOrEmpty(AuthProvider.CurrentUser.TeamName))
                                                {
                                                    @if (AuthProvider.CurrentUser.SteamId != "STEAM_UNDEFINED")
                                                    {
                                                        <div @onclick=@(async (MouseEventArgs e) => OpenTeamCreation())>
                                                            <RadzenProfileMenuItem Text="Создать команду" Icon="add_circle"></RadzenProfileMenuItem>
                                                        </div>
                                                    }
                                                }
                                                @if (AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.Moderator || AuthProvider.CurrentUser.IsVip || AuthProvider.CurrentUser.IsPremiumVip) 
                                                {
                                                    <div @onclick=@(async (MouseEventArgs e) => OpenStylesEditor())>
                                                        <RadzenProfileMenuItem Text="Редактор стилей" Icon="style"></RadzenProfileMenuItem>
                                                    </div>
                                                }
                                                <RadzenProfileMenuItem Path="/vip-features" Text="VIP" Icon="diamond"></RadzenProfileMenuItem>
                                                <RadzenProfileMenuItem Path="/clientsettings" Text="Настройки" Icon="settings"></RadzenProfileMenuItem>
                                                <div @onclick=@(async (MouseEventArgs e) => AuthProvider.LogoutAsync())>
                                                    <RadzenProfileMenuItem Text="Выйти" Icon="logout"></RadzenProfileMenuItem>
                                                </div>
                                            </ChildContent>
                                        </RadzenProfileMenu>
                                    </RadzenStack>
                                </Authorized>
                                <NotAuthorized>
                                    <RadzenButton Click=@(() => { NavigationManager.NavigateTo("/login"); }) Icon="login" Text="Войти" />
                                </NotAuthorized>
                            </AuthorizeView>
                        </CascadingAuthenticationState>
                        @* <RadzenAppearanceToggle /> *@
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </RadzenHeader>
        <RadzenSidebar Expanded="@sidebarExpanded" style="z-index: 2">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" class="rz-py-4 rz-py-lg-6" Style="padding: var(--rz-panel-menu-item-padding); border-bottom: var(--rz-panel-menu-item-border);">
                <RadzenImage Path="images/logo.png" style="width: 48px; height: 48px;" AlternateText="Application logo"></RadzenImage>
                <RadzenText Text="kTVCSS" TextStyle="Radzen.Blazor.TextStyle.Subtitle1" class="rz-mb-0" style="color: var(--rz-sidebar-color);" />
            </RadzenStack>
            <RadzenPanelMenu>
                <CascadingAuthenticationState>
                    <AuthorizeView>
                        <Authorized>
                            @if (AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.Moderator)
                            {
                                <RadzenPanelMenuItem Expanded=false Text="Админ" Icon="shield_person">
                                    <RadzenPanelMenuItem Click=SidePanelClick Text="Тикеты" Path="/tickets" Icon="import_contacts"></RadzenPanelMenuItem>
                                    <RadzenPanelMenuItem Click=SidePanelClick Text="База знаний" Path="/library" Icon="library_books"></RadzenPanelMenuItem>
                                    @if (AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.Admin)
                                    {
                                        <RadzenPanelMenuItem Click=SidePanelClick Text="Управление админами" Path="/editadmins" Icon="manage_accounts"></RadzenPanelMenuItem>
                                        <RadzenPanelMenuItem Click=SidePanelClick Text="Дашборд" Path="/dashboard" Icon="dashboard"></RadzenPanelMenuItem>
                                        <RadzenPanelMenuItem Expanded=false Text="Разделы главной" Icon="home">
                                            <RadzenPanelMenuItem Click=SidePanelClick Text="Создать новость" Path="/createarticle" Icon="newspaper"></RadzenPanelMenuItem>
                                            <RadzenPanelMenuItem Click=SidePanelClick Text="Добавить вакансию" Path="/addwork" Icon="work"></RadzenPanelMenuItem>
                                            <RadzenPanelMenuItem Click=OpenAdvertAdder Text="Добавить рекламу" Icon="ad"></RadzenPanelMenuItem>
                                        </RadzenPanelMenuItem>
                                    }
                                    <RadzenPanelMenuItem Expanded=false Text="Общее" Icon="settings">
                                        @if (AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.Moderator) {
                                            <RadzenPanelMenuItem Click=SidePanelClick Text="Редактор цитат" Path="/editcitations" Icon="comic_bubble"></RadzenPanelMenuItem>
                                        }
                                        @if (AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.SuperAdmin)
                                        {
                                            <RadzenPanelMenuItem Click=SidePanelClick Text="Редактор причин бана" Path="/editbanreasons" Icon="no_accounts"></RadzenPanelMenuItem>
                                            <RadzenPanelMenuItem Click=SidePanelClick Text="Редактор причин репортов" Path="/editreportreasons" Icon="report"></RadzenPanelMenuItem>
                                            <RadzenPanelMenuItem Click=SidePanelClick Text="Редактор миксовых карт" Path="/editmixesmaps" Icon="build"></RadzenPanelMenuItem>
                                            <RadzenPanelMenuItem Click=SidePanelClick Text="Редактор кв карт" Path="/editmappool" Icon="build"></RadzenPanelMenuItem>
                                        }
                                        @if (AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.MovieMaker)
                                        {
                                            <RadzenPanelMenuItem Click=SidePanelClick Text="MovieMaking-центр" Path="/moviemaker" Icon="movie"></RadzenPanelMenuItem>
                                        }
                                    </RadzenPanelMenuItem>
                                    <RadzenPanelMenuItem Expanded=false Text="Системное" Icon="terminal">
                                        @if (AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.Admin)
                                        {
                                            <RadzenPanelMenuItem Click=CloseProject Text="Открыть/закрыть сайт" Icon="power_settings_circle"></RadzenPanelMenuItem>
                                        }
                                        @if (AuthProvider.CurrentUser.Role >= kTVCSS.Models.Db.Models.Roles.RoleType.Moderator) {
                                            <RadzenPanelMenuItem Click=SidePanelClick Text="Управление сервисами" Path="/servicesctl" Icon="function"></RadzenPanelMenuItem>
                                        }
                                    </RadzenPanelMenuItem>
                                </RadzenPanelMenuItem>
                            }
                        </Authorized>
                    </AuthorizeView>
                </CascadingAuthenticationState>
                <CascadingAuthenticationState>
                    <AuthorizeView>
                        <Authorized>
                            <RadzenPanelMenuItem Expanded=false>
                                <ChildContent>
                                    <RadzenPanelMenuItem Click=SidePanelClick Text="Мой профиль" Path="@(string.Concat("/player/", AuthProvider.CurrentUser.Id))" Icon="account_circle"></RadzenPanelMenuItem>
                                    @if (!string.IsNullOrEmpty(AuthProvider.CurrentUser.TeamName))
                                    {
                                        <RadzenPanelMenuItem Click=SidePanelClick Text="Моя команда" Path="@(string.Concat("/team/", AuthProvider.CurrentUser.TeamID))" Icon="groups"></RadzenPanelMenuItem>
                                    }
                                    <RadzenPanelMenuItem Click=SidePanelClick Text="Мои сообщения" Path="/chat" Icon="mail"></RadzenPanelMenuItem>
                                    <RadzenPanelMenuItem Click=SidePanelClick Text="Мои друзья" Path="/friends" Icon="group"></RadzenPanelMenuItem>
                                    <RadzenPanelMenuItem Click=SidePanelClick Text="Мои матчи" Path="@(string.Concat("/mp/", AuthProvider.CurrentUser.Id))" Icon="filter_list"></RadzenPanelMenuItem>
                                    <RadzenPanelMenuItem Click=SidePanelClick Text="Мои обращения" Path="@(string.Concat("/tickets/", AuthProvider.CurrentUser.Id))" Icon="support_agent"></RadzenPanelMenuItem>
                                </ChildContent>
                                <Template>
                                    <RadzenStack Gap="12px" AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal">
                                        <img class="ktvcss-avatar-small" src="@(AuthProvider.CurrentUser.AvatarUrl ?? "/images/logo_ktv.png")" />
                                        <div class="rz-navigation-item-text">@AuthProvider.CurrentUser.Username</div>
                                    </RadzenStack>
                                </Template>
                            </RadzenPanelMenuItem>
                        </Authorized>
                    </AuthorizeView>
                </CascadingAuthenticationState>
                <RadzenPanelMenuItem Click=SidePanelClick Icon="home" Text="Главная" Path="" />
                <RadzenPanelMenuItem Click=SidePanelClick Icon="person" Text="Игроки" Path="/players" />
                <RadzenPanelMenuItem Click=SidePanelClick Icon="block" Text="Банлист" Path="/banslist" />
                <RadzenPanelMenuItem Click=SidePanelClick Icon="groups" Text="Команды" Path="/teams" />
                <RadzenPanelMenuItem Click=SidePanelClick Icon="videogame_asset" Text="Матчи" Path="/matches" />
                <RadzenPanelMenuItem Click=SidePanelClick Icon="trophy" Text="Боевые кубки" Path="/battlecups" />
                <RadzenPanelMenuItem Click=SidePanelClick Icon="lan" Text="Серверы" Path="/gameservers" />
                <RadzenPanelMenuItem Expanded=false Text="Информация" Icon="info">
                    <RadzenPanelMenuItem Click=SidePanelClick Icon="apartment" Path="/about" Text="О проекте" />
                    <RadzenPanelMenuItem Click=SidePanelClick Icon="gavel" Path="/rules" Text="Правила" />
                    <RadzenPanelMenuItem Click=SidePanelClick Icon="contactless" Path="/contacts" Text="Контакты" />
                    <RadzenPanelMenuItem Click=SidePanelClick Icon="contact_support" Path="/faq" Text="FAQ" />
                    @if (!isMobile)
                    {
                        <RadzenPanelMenuItem Click=SidePanelClick Icon="download_for_offline" Path="/downloads" Text="Загрузки" />
                        <RadzenPanelMenuItem Click=SidePanelClick Icon="deployed_code_history" Path="/github" Text="GitHub монитор" />
                    }
                </RadzenPanelMenuItem>
            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody Expanded="@sidebarExpanded">
            <RadzenRow class="rz-mx-auto rz-px-4 rz-pt-2 rz-pt-md-4 rz-pt-lg-6 rz-pt-xl-12 rz-pb-2 rz-pb-lg-12" Style="max-width: 1440px;">
                <ErrorBoundary>
                    <ChildContent>
                        <RadzenColumn Size="12">
                            @Body
                        </RadzenColumn>
                    </ChildContent>
                    <ErrorContent Context="exception">
                        <RadzenStack>
                            <RadzenText TextStyle="TextStyle.DisplayH4">
                                Произошла ошибка
                            </RadzenText>
                            <RadzenCard>
                                @exception.ToString()
                            </RadzenCard>
                            <RadzenButton Text="На главную" Click="@(() => { NavigationManager.NavigateTo("/", true); })" />
                        </RadzenStack>
                    </ErrorContent>
                </ErrorBoundary>
            </RadzenRow>
        </RadzenBody>
        @if (!isMobile)
        {
            <RadzenFooter>
                <RadzenStack AlignItems=AlignItems.Center JustifyContent=JustifyContent.Center Orientation="Orientation.Horizontal">
                    <RadzenLink class="rz-text-caption" Path="https://t.me/kurwanator1337" Target="_blank" Text="@string.Concat("kTVCSS Ⓒ 2013 - ", DateTime.Now.Year)" />
                    <RadzenLink class="rz-text-caption" Path="/about" Text="О проекте" />
                    <RadzenLink class="rz-text-caption" Path="/rules" Text="Правила" />
                    <RadzenLink class="rz-text-caption" Path="/contacts" Text="Контакты" />
                    <RadzenLink class="rz-text-caption" Path="/faq" Text="FAQ" />
                    <RadzenLink class="rz-text-caption" Path="/downloads" Text="Загрузки" />
                </RadzenStack>
            </RadzenFooter>
        }
    </RadzenLayout>
}
else
{
    <AppLoader />
}

@*
    определение стилей здесь из-за ограничений архитектуры Blazor из-за недоступности 
    переопределения Scoped CSS файлов для дочерних элементов DOM дерева и рендера элементов вне Blazor
*@

<style>
    .ktvcss-avatar-small {
        border-radius: 50%;
        width: 28px;
        height: 28px;
        border: 1px solid #121518;
    }


    .rz-dialog-wrapper {
        backdrop-filter: blur(3px) !important;
    }

    .rz-link-text {
        box-sizing: border-box;
        color: #e0e4e9 !important;
        text-decoration: none;
        cursor: pointer;
    }

    .rz-link {
        box-sizing: border-box;
        color: #e0e4e9 !important;
        text-decoration: none;
        cursor: pointer;
    }

    .rz-fileupload-content {
        display: none;
    }
</style>

<style>
    @globalStyles
</style>

<script>
    window.onload = function () {
        console.log('init');

        chrome.tabs.onCreated.addListener(function (tab) {
            chrome.tabs.update(tab.id, {
                autoDiscardable: false
            });
        });

        chrome.tabs.onReplaced.addListener(function (tabId) {
            chrome.tabs.update(tabId, {
                autoDiscardable: false
            });
        });

        chrome.runtime.onInstalled.addListener(function (details) {
            chrome.tabs.query({}, function (tabs) {
                tabs.forEach(function (tab) {
                    chrome.tabs.update(tab.id, {
                        autoDiscardable: false
                    });
                });
            });
        });
    }

    var noSleep = new NoSleep();
    var ambience = new Audio('/sounds/ambience.mp3');
    ambience.loop = true;

    window.playAmbience = function () {
        ambience.volume = 0.01;
        ambience.play();
    }

    window.stopAmbience = function () {
        ambience.pause();
    }

    document.addEventListener('click', function enableNoSleep() {
        document.removeEventListener('click', enableNoSleep, false);
        noSleep.enable();
    }, false);

    setInterval(() => {
        if (document.hidden) {
            console.log("Keeping alive...");
            fetch('/');
        }
    }, 30000);

    window.playGameReadySound = () => {
        var audio = new Audio('/sounds/pornhub.mp3');
        try {
            const gameSound = JSON.parse(localStorage.getItem("GFSound"));

            if (gameSound && gameSound.Value) {
                audio = new Audio(gameSound.Value);
                audio.volume = 1;
                audio.play();
            } else {
                audio.volume = 1;
                audio.play();
            }
        }
        catch (exc) {
            audio = new Audio('/sounds/pornhub.mp3');
            audio.volume = 1;
            audio.play();
        }
    }

    if ('serviceWorker' in navigator) {
        window.addEventListener('load', function () {
            navigator.serviceWorker.register('/sw.js')
                .then(function (registration) {
                    console.log('Service Worker зарегистрирован:', registration.scope);

                    // Регистрируем фоновую синхронизацию
                    if ('sync' in registration) {
                        return registration.sync.register('keep-alive-sync');
                    }
                })
                .then(function () {
                    console.log('Фоновая синхронизация зарегистрирована');
                })
                .catch(function (error) {
                    console.log('Ошибка регистрации Service Worker:', error);
                });
        });
    }

    let keepAliveInterval;
    let audioContext;

    window.startKeepAliveActivities = () => {
        if (!audioContext && (window.AudioContext || window.webkitAudioContext)) {
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();

            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);

            oscillator.frequency.setValueAtTime(20000, audioContext.currentTime);
            gainNode.gain.setValueAtTime(0.001, audioContext.currentTime);

            oscillator.start();
        }

        keepAliveInterval = setInterval(() => {
            let title = document.title;
            const timestamp = Date.now();
            document.title = title + '_';
            setTimeout(() => {
                document.title = title;
            }, 100);
        }, 60000);
    };

    window.sendServiceWorkerMessage = (message) => {
        if (navigator.serviceWorker && navigator.serviceWorker.controller) {
            navigator.serviceWorker.controller.postMessage(message);
        }
    };

    document.addEventListener('visibilitychange', () => {
        if (!document.hidden) {
            console.log('Вкладка стала активной');
            window.sendServiceWorkerMessage({ type: 'MANUAL_PING' });
        }
    });
</script>

@code {
    private bool sidebarExpanded = true;
    private bool disposed = false;
    private bool isMobile = false;
    private bool ready = false;
    private List<string> citations = [];

    private bool inSearch = false;
    private bool searchButtonEnabled = true;
    private int currentSearchUsersCount = 0;
    private string globalStyles = string.Empty;

    public void Dispose()
    {
        disposed = true;
        mm.DisposeAsync();
        ChatHub.DisposeAsync();
        KeepAliveService.StopKeepAlive();
    }

    private void SidePanelClick()
    {
        if (isMobile)
        {
            sidebarExpanded = false;
        }
    }

    private async Task ShowMM()
    {
        var parameters = new Dictionary<string, object>();

        parameters.Add("InSearch", inSearch);
        parameters.Add("InSearchChanged", EventCallback.Factory.Create<bool>(this, value => 
        {
            inSearch = value;
            StateHasChanged();
        }));

        parameters.Add("SearchButtonEnabled", searchButtonEnabled);
        parameters.Add("SearchButtonEnabledChanged", EventCallback.Factory.Create<bool>(this, value => 
        {
            searchButtonEnabled = value;
            StateHasChanged();
        }));

        parameters.Add("CurrentSearchUsersCount", currentSearchUsersCount);
        parameters.Add("CurrentSearchUsersCountChanged", EventCallback.Factory.Create<int>(this, value => 
        {
            currentSearchUsersCount = value;
            StateHasChanged();
        }));

        parameters.Add("Hub", mm);

        await DialogService.OpenSideAsync<GameWindow>("Система подбора матчей kTVCSS", 
            parameters: parameters,
            options: new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Left, ShowMask = true, Width = "600px" });
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine($"ShouldRender returns {base.ShouldRender()}");

        return base.ShouldRender();
    }

    private async Task CloseProject()
    {
        await http.GetAsync("/api/admins/SwitchLockAccess");

        NavigationManager.Refresh(true);
    }

    private List<Sound> sounds = [];
    private Sound selectedGameFoundSound;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            bool nt = false;

            KeepAliveService.StartKeepAlive();

            try
            {
                await WindowSize.InitializeAsync(JSRuntime);

                isMobile = await mds.IsMobileDeviceAsync();

                if (isMobile)
                {
                    sidebarExpanded = false;
                }

                var ctss = await http.GetFromJsonAsync<List<Citation>>("/api/citations");

                citations = ctss.Select(x => x.Text).OrderBy(x => new Random().Next()).Take(8).ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }

            ready = true;

            await InvokeAsync(StateHasChanged);

            #pragma warning disable CS4014 // Так как этот вызов не ожидается, выполнение существующего метода продолжается до тех пор, пока вызов не будет завершен
            
            Task.Run(async () =>
            {
                await Task.Delay(100);

                while (AuthProvider.CurrentUser is null)
                {
                    if (disposed)
                    {
                        return;
                    }
 
                    await Task.Delay(500); // ждем авторизацию
                }

                if (AuthProvider.CurrentUser is not null)
                {
                    if (AuthProvider.CurrentUser.SteamId.ToLower().Contains("undef"))
                    {
                        string verifyCode = await http.GetStringAsync("/api/players/getregcode?id=" + AuthProvider.CurrentUser.Id);

                        var result = await DialogService.OpenAsync("Привязка STEAMID", ds =>
                            @<RadzenStack Gap="1.5rem">
                                <RadzenStack Gap="0px">
                                    <RadzenText>Чтобы начать играть или всячески взаимодействовать с сайтом, Вам необходимо зайти на сервер, чтобы зарегистрировать и подтвердить Ваш SteamID.</RadzenText>
                                    <RadzenText>Для этого зайдите на сервер <span style="color: #00ff00;"><strong>connect ktvcss.com:12121</strong></span> и напишите в чат код <span style="text-decoration: underline; color: #ff0000;"><strong>@verifyCode</strong></span>.</RadzenText>
                                    <RadzenText><b>Если Вас кикнет с сервера, значит у Вас все получилось. И не забудьте обновить страницу!</b></RadzenText>
                                </RadzenStack>
                            </RadzenStack>
    , options: new DialogOptions() { ShowClose = false, CloseDialogOnEsc = false, CloseDialogOnOverlayClick = false });
                    }
                    else
                    {
                        sounds.Add(new() { Name = "PornHub", Value = "/sounds/pornhub.mp3" });
                        sounds.Add(new() { Name = "Seagull", Value = "/sounds/seagull.mp3" });
                        sounds.Add(new() { Name = "RockMeme", Value = "/sounds/rockmeme.mp3" });
                        sounds.Add(new() { Name = "Nani?", Value = "/sounds/nani.mp3" });
                        sounds.Add(new() { Name = "Max Verstappen", Value = "/sounds/max-verstappen.mp3" });
                        sounds.Add(new() { Name = "Lobotomy", Value = "/sounds/lobotomy.mp3" });

                        var actualGameSound = await localStorage.GetItemAsync<Sound>("GFSound");

                        if (actualGameSound is not null) 
                        {
                            selectedGameFoundSound = sounds.FirstOrDefault(x => x.Name == actualGameSound.Name);
                        }
                        else {
                            localStorage.SetItemAsync("GFSound", new Sound() { Name = "PornHub", Value = "/sounds/pornhub.mp3" });
                        }

                        JSRuntime.InvokeVoidAsync("console.log", actualGameSound.Name);

                        nt = await JSRuntime.InvokeAsync<bool>("getPermission");

                        if (nt)
                        {
                            await DialogService.OpenAsync("Подключение уведомлений", ds =>
                                        @<RadzenStack Gap="1.5rem">
                                            <RadzenText>Сейчас откроется диалог, в котором сайт потребует разрешения на отправку уведомлений. Согласитесь, если Вам требуется, чтобы браузер или устройство отправляло уведомление о сообщениях или найденной игре.</RadzenText>
                                            <RadzenButton Text="Ок" Click=@(() => { ds.Close(true); }) />
                                        </RadzenStack>
                            , options: new DialogOptions() { ShowClose = true, CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true });

                            JSRuntime.InvokeVoidAsync("requestNotificationPermission");
                        }

                        globalStyles = await http.GetStringAsync("/api/players/getstyles?id=" + AuthProvider.CurrentUser.Id);

                        await InvokeAsync(StateHasChanged);

                        Task.Run(async () => {
                            try {
                                string baseUri = "http://localhost:4050";

                                #if RELEASE

                                baseUri = "https://chat.ktvcss.com";

                                #endif

                                var dialogs = await http.GetFromJsonAsync<List<DialogDto>>($"{baseUri}/api/chat/dialogs?userId={AuthProvider.CurrentUser.Id}");
                                
                                if (dialogs.Any(x => x.UnreadCount > 0)) {
                                    NotificationService.Notify(NotificationSeverity.Info, "У Вас есть новые сообщения в мессенджере. Нажмите на это сообщение, чтобы перейти в него!", click: (msg) => {
                                        NavigationManager.NavigateTo("/chat");
                                    });
                                }
                            }
                            catch (Exception) {
                                // chat not available
                            }
                        });

                        mm.Connection.Reconnecting += (async (exception) => {
                            if (exception is not null)
                            {
                                Console.Error.WriteLine(exception.ToString());
                            }

                            NotificationService.Notify(NotificationSeverity.Warning, "Попытка восстановления соединения к поиску игры...");
                        });

                        mm.Connection.Reconnected += (async (message) => {
                            if (!string.IsNullOrEmpty(message))
                            {
                                Console.WriteLine(message);
                            }

                            NotificationService.Notify(NotificationSeverity.Info, "Соединение до поиска игры восстановлено!");

                            await mm.OnAfterConnect(AuthProvider.CurrentUser);
                        });

                        mm.Connection.Closed += async (exception) => 
                        {
                            inSearch = false;

                            await InvokeAsync(StateHasChanged);

                            if (exception is not null)
                            {
                                Console.Error.WriteLine(exception.Message);

                                await DialogService.OpenAsync("Система подбора матчей - ошибка", ds =>
                                        @<RadzenStack Gap="1.5rem">
                                            <RadzenText>Подключение к сервису подбора матчей было закрыто: @exception.Message</RadzenText>
                                            <RadzenButton Text="Ок" Click=@(() => { ds.Close(true); }) />
                                        </RadzenStack>
                            , options: new DialogOptions() { ShowClose = true, CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true });

                                NavigationManager.Refresh(true);
                            }
                        };

                        mm.Connection.On("MixEnded", async () => {
                            if (mm.Connection.State != HubConnectionState.Disconnected) {
                                try {
                                    await mm.Connection.StopAsync();
                                }
                                catch (Exception) {

                                }
                            }
                            NotificationService.Notify(NotificationSeverity.Success, "Матч закончился! Ждем Вас снова!");
                            inSearch = false;
                            await InvokeAsync(StateHasChanged);
                        });

                        mm.Connection.On<GameHubConnectResult>("GetConnectResult", async (result) => {

                            Console.WriteLine(result.ToString());

                            switch (result) {
                                case GameHubConnectResult.Ok: {
                                    await InvokeAsync(StateHasChanged);
                                    NotificationService.Notify(NotificationSeverity.Success, "Вы вошли в поиск игры");
                                    break;
                                }
                                case GameHubConnectResult.NoPlayerData: {
                                    NotificationService.Notify(NotificationSeverity.Error, "Не удалось получить данные о Вас. Попробуйте обновить страницу.");
                                    break;
                                }
                                case GameHubConnectResult.AlreadyExists: {
                                    NotificationService.Notify(NotificationSeverity.Error, "Вы уже в поиске игры!");
                                    break;
                                }
                                case GameHubConnectResult.AlreadyPlaying: {
                                    NotificationService.Notify(NotificationSeverity.Error, "Вы уже играете микс!");
                                    break;
                                }
                                case GameHubConnectResult.IsBanned: {
                                    NotificationService.Notify(NotificationSeverity.Error, "Вы были заблокированы, поэтому Вы не можете начать поиск игры!");
                                    break;
                                }
                                case GameHubConnectResult.MixesDisabled: {
                                    NotificationService.Notify(NotificationSeverity.Error, "Миксы временно отключены, попробуйте позже!");
                                    break;
                                }
                            }
                        });

                        mm.Connection.On<string>("JoinRoom", (guid) => {
                            JSRuntime.InvokeVoidAsync("stopAmbience");
                            NavigationManager.NavigateTo("/mixroom/" + guid, true);
                        });

                        mm.Connection.On<GameHubMixCreateResult>("GetMixCreateResult", async (result) => {
                            switch (result)
                            {
                                case GameHubMixCreateResult.Ok: {
                                    inSearch = false;
                                    JSRuntime.InvokeVoidAsync("stopAmbience");
                                    await ShowGameReady();
                                    break;
                                }
                                case GameHubMixCreateResult.NoServersAvailable: {
                                    NotificationService.Notify(NotificationSeverity.Error, "Не удалось создать микс, потому что нет свободных серверов!");
                                    break;
                                }
                            }
                        });

                        ChatHub.Connection.On<MessageDto>("ReceiveMessage", async (message) =>
                        {
                            if (!NavigationManager.Uri.ToLower().Contains("/chat"))
                            {
                                JSRuntime.InvokeVoidAsync("showNotification", message.Sender.Login, message.Content.Length > 20 ? message.Content[0..20] : message.Content, message.Sender.AvatarUrl);

                                NotificationService.Notify(NotificationSeverity.Info, message.Sender.Login, message.Content.Length > 20 ? message.Content[0..20] : message.Content, duration: 5000, payload: DateTime.Now, click: (msg) =>
                                {
                                    NavigationManager.NavigateTo("/chat/" + message.DialogId);
                                });
                            }
                        });

                        if (ChatHub.Connection.State != HubConnectionState.Connected)
                        {
                            await ChatHub.StartAsync();

                            ChatHub.OnAfterConnect(AuthProvider.CurrentUser.Id);
                        }
                    }
                }
            });
            
            #pragma warning restore CS4014 // Так как этот вызов не ожидается, выполнение существующего метода продолжается до тех пор, пока вызов не будет завершен
        }
    }

    void SidebarToggleClick()
    {
        sidebarExpanded = !sidebarExpanded;
    }

    private string _teamName = string.Empty;

    private async Task ShowGameReady()
    {
        try {
            JSRuntime.InvokeVoidAsync("playGameReadySound");

            JSRuntime.InvokeVoidAsync("showNotification", "ИГРА НАЙДЕНА!");
        }
        catch (Exception ex) {
            Console.Error.WriteLine(ex.ToString());
        }

        DialogService.OpenAsync("", ds => 
        @<RadzenStack Style="height: 100vh;max-height: 100%;overflow: hidden;" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center"><GameFound Strings="citations"/></RadzenStack>, 
        new DialogOptions(){ Width = "60vw", Height = "80vh", ShowClose = false, CloseDialogOnEsc = false, CloseDialogOnOverlayClick = false });

        Task.Run(async () => {
            await Task.Delay(6500);

            DialogService.Close();
        });
    }

    private async Task OpenStylesEditor()
    {
        string styles = await http.GetStringAsync("/api/players/getstyles?id=" + AuthProvider.CurrentUser.Id);
        bool save = false;

        var result = await DialogService.OpenAsync("Редактор стилей", ds =>
        @<RadzenStack Gap="1.5rem">
            <RadzenTextArea Rows=10 Placeholder="Введите CSS стили, которые хотели бы применить к сайту" @bind-Value=@styles Style="width: 100%;" />
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Сохранить" Click=@(() => { save = true; ds.Close(true); }) />
                        <RadzenButton Text="Отмена" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
        );

        if (save) 
        {
            StyleItem style = new StyleItem() 
            {
                Id = AuthProvider.CurrentUser.Id,
                Style = styles
            };

            await http.PostAsJsonAsync("/api/players/savestyles", style);

            NavigationManager.Refresh(true);
        }
    }

    private async Task OpenAdvertAdder()
    {
        Advert advert = new();

        var result = await DialogService.OpenAsync("Создание рекламы", ds =>
        @<RadzenStack Gap="1.5rem">
            <RadzenTextArea Rows=10 Placeholder="Введите HTML-код рекламы" @bind-Value=@advert.Html Style="width: 100%;" />
            <RadzenTextBox Placeholder="Ссылка на ресурс" @bind-Value="advert.Link" Style="width: 100%;" />
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Создать" Click=@(() => { ds.Close(true); }) />
                        <RadzenButton Text="Отмена" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
        );

        if (advert.Link.Length > 0 && advert.Html.Length > 0) 
        {
            await http.PostAsJsonAsync("/api/guest/addadvert", advert);

            NavigationManager.Refresh(true);
        }
    }

    private async Task OpenTeamCreation()
    {
        var result = await DialogService.OpenAsync("Создание команды", ds =>
        @<RadzenStack Gap="1.5rem">
            <RadzenStack Gap="0px">
                <RadzenText>Вы собираетесь создать команду на проекте!</RadzenText>
                <RadzenText>Команда необходима для участия в командных матчах, а также в турнирах.</RadzenText>
                <RadzenText>При указании тега учитывайте то, что он должен совпадать полностью с тем, что Вы собираетесь использовать в игре.</RadzenText>
                <RadzenText>Иначе результаты матчей не будут учитываться в профиль команды!</RadzenText>
            </RadzenStack>
        <RadzenTextBox Placeholder="Напишите название команды (тег)" @bind-Value=@_teamName Style="width: 100%;" />
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Создать" Click=@(() => { ds.Close(true); CreateTeam(); }) />
                    <RadzenButton Text="Отмена" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
    );
    }

    private async Task CreateTeam()
    {
        var data = new CreateTeamData()
            {
                Name = _teamName,
                SteamID = AuthProvider.CurrentUser.SteamId
            };

        var request = await http.PostAsJsonAsync("/api/teams/createteam", data);

        var response = await request.Content.ReadFromJsonAsync<CreateTeamResult>();

        switch (response)
        {
            case CreateTeamResult.AlreadyCreatedLatestly:
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Ошибка", "Вы недавно создавали команду, подождите немного");
                    break; 
                }
            case CreateTeamResult.TeamExist:
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Ошибка", "Команда с таким названием уже существует");
                    break; 
                }
            case CreateTeamResult.PlayerExistInTeam:
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Ошибка", "У Вас уже есть команда!");
                    break; 
                }
            case CreateTeamResult.TooManyTeams:
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Ошибка", "Нельзя регистрировать несколько команд сразу");
                    break; 
                }
            case CreateTeamResult.Ok:
                {
                    NotificationService.Notify(NotificationSeverity.Success, "Успех", "Команда создана успешно!");

                    var player = await http.GetFromJsonAsync<PlayerInfo>($"/api/players/getplayerbyid?id={AuthProvider.CurrentUser.Id}");

                    await Task.Delay(500);

                    NavigationManager.NavigateTo($"/team/{player.TeamInfo.ID}");

                    break;
                }
        }
    }
}